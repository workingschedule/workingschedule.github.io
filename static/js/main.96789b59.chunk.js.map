{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["formatStr","moment","locale","DavidArr","HongArr","JunArr","getListData","value","DavidDays","diff","format","HongDays","JunDays","listData","DavidIndex","Math","abs","push","type","content","HongIndex","JunIndex","text","dateCellRender","className","map","item","index","key","status","CalendarStyled","styled","Calendar","WorkingSchedule","state","onSelect","setState","onPanelChange","this","style","marginTop","message","David","Hong","Jun","obj","find","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96789b59.chunk.js","sourcesContent":["import { Alert, Badge, Calendar } from 'antd';\nimport 'antd/dist/antd.css';\n// import locale from 'antd/lib/date-picker/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst formatStr = 'YYYY-M-DD'\n\nmoment.locale('zh-cn')\n\nconst DavidArr = ['休息', '休息', '夜班', '夜班', '中班', '中班', '白班', '白班']\nconst HongArr = ['上班', '休息']\nconst JunArr = ['白一', '白二', '白三', '夜班']\n\nfunction getListData (value: any) {\n  const DavidDays = moment('2019-5-4', formatStr).diff(value.format('YYYY-MM-DD'), 'days')\n  const HongDays = moment('2019-5-4', formatStr).diff(value.format('YYYY-MM-DD'), 'days')\n  const JunDays = moment('2019-8-26', formatStr).diff(value.format('YYYY-MM-DD'), 'days')\n  let listData: ({ type: 'warning' | 'success' | 'error', content: string })[] = []\n\n  if (DavidDays <= 0) {\n    const DavidIndex = Math.abs(DavidDays) % 8\n    listData.push({\n      type: 'success',\n      content: '郭  ' + DavidArr[DavidIndex]\n    })\n  }\n\n  if (HongDays <= 0) {\n    const HongIndex = Math.abs(HongDays) % 2\n    listData.push({\n      type: 'warning',\n      content: '岳  ' + HongArr[HongIndex]\n    })\n  }\n\n  if (JunDays <= 0) {\n    const JunIndex = Math.abs(JunDays) % 4\n    const isWeekend = (value.format('E') === '6' || value.format('E') === '7')\n    const text = isWeekend ? '休' : JunArr[JunIndex]\n\n    listData.push({\n      type: 'error',\n      content: '军  ' + text\n    })\n  }\n  return listData || [];\n}\n\nfunction dateCellRender (value: any) {\n  const listData = getListData(value);\n  return (\n    <ul className=\"events\">\n      {\n        listData.map((item, index) => (\n          <li key={item.content + index}>\n            <Badge status={item.type} text={item.content} />\n          </li>\n        ))\n      }\n    </ul>\n  );\n}\n\nconst CalendarStyled = styled(Calendar)`\n.events {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n.events .ant-badge-status {\n  overflow: hidden;\n  white-space: nowrap;\n  width: 100%;\n  text-overflow: ellipsis;\n  font-size: 12px;\n}\n.notes-month {\n  text-align: center;\n  font-size: 28px;\n}\n.notes-month section {\n  font-size: 28px;\n}\n`\n\nclass WorkingSchedule extends Component {\n  state = {\n    value: moment(),\n  }\n\n  onSelect = (value: any) => {\n    this.setState({\n      value,\n    });\n  }\n\n  onPanelChange = (value: any) => {\n    this.setState({ value })\n  }\n\n  get David () {\n    const { value } = this.state\n    const obj = value && getListData(value).find(item => item.type === 'success')\n    return obj && obj.content\n  }\n\n  get Hong () {\n    const { value } = this.state\n    const obj = value && getListData(value).find(item => item.type === 'warning')\n    return obj && obj.content\n  }\n\n  get Jun () {\n    const { value } = this.state\n    const obj: any = value && getListData(value).find(item => item.type === 'error')\n    const xx = getListData(value)\n    return obj && obj.content\n  }\n\n  render () {\n    const { value } = this.state\n    return (\n      <div className=\"workingSchedule\">\n        <h1 style={{ marginTop: '.5em' }}>{value && value.format('YYYY-MM-DD')}</h1>\n        <Alert type='success' message={`${this.David}`} />\n        <Alert type='warning' message={`${this.Hong}`} />\n        <Alert type='error' message={`${this.Jun}`} />\n        <CalendarStyled\n          value={value}\n          onSelect={this.onSelect}\n          onPanelChange={this.onPanelChange}\n          dateCellRender={dateCellRender}\n        />\n      </div>\n    );\n\n  }\n}\n\nexport default WorkingSchedule;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}